///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2009 Vincent Petithory - http://blog.lunar-dev.net/
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE. 
///////////////////////////////////////////////////////////////////////////////

<languageVersion : 1.0;>

kernel BlendModeInvertAverage
<   
    namespace : "http://www.lunar-dev.net/2009/stdpx/blendmodes";
    vendor : "Vincent Petithory";
    version : 1;
    description : "Merges two images using the Invert Average blend mode. Same as Linear Burn but with higher contrast.";
>
{
    input image4 background;
    input image4 blender;
    output pixel4 pxout;

    void evaluatePixel()
    {
        float2 uc = outCoord();
        pixel4 pxbg = sampleNearest(background,uc);
        pixel4 pxbl = sampleNearest(blender,uc);
        
        if (pxbg.a>0.0)
        {
            pxbg.rgb /= pxbg.a;
        }
        if (pxbl.a>0.0)
        {
            pxbl.rgb /= pxbl.a;
        }
        
        pixel3 result;
        
        
        result = (pxbg.rgb-pxbl.rgb)*2.0;
        
            
        
        pxout.rgb = pxbg.rgb*(1.0-pxbl.a)+result*pxbl.a;
        pxout.a = 1.0;
        
    }
}
