///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2009 Vincent Petithory - http://blog.lunar-dev.net/
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE. 
///////////////////////////////////////////////////////////////////////////////

<languageVersion : 1.0;>

kernel BlendModeDissolve
<   
    namespace : "http://blog.lunar-dev.net::BlendModes";
    vendor : "Vincent Petithory";
    version : 1;
    description : "Merges two images using the Dissolve blend mode.";
>
{
    input image4 background;
    input image4 blender;
    output pixel4 pxout;
    
    parameter float randomSeed
    <
        maxValue : 1.0;
        minValue : 0.0;
        defaultValue : 0.5;
    >;
    
    // Edits or paints each pixel to make it the result color. 
    // However, the result color is a random replacement of the pixels with the base color or the blend color, 
    // depending on the opacity at any pixel location. 
    void evaluatePixel()
    {
        float2 uc = outCoord();
        pixel4 pxbg = sampleNearest(background,uc);
        pixel4 pxbl = sampleNearest(blender,uc);
        
        float div = 2147483647.0;
        float dende = 1103515245.0;
        
        float random = floor(dende*100.0*((uc.x*uc.x+uc.y*uc.y-2.0*uc.x*uc.y)*(1.0+randomSeed))-div*floor((dende*((uc.x*uc.x+uc.y*uc.y-0.5*uc.x*uc.y)*(1.0))/div)))/div;

        float reference = abs(cos(random));
        
        pxout.rgb = pxbl.rgb;
        
        float alpha = pxbl.a;
        
        if (reference>alpha)
        {
            pxout.rgb = pxbg.rgb;
        }
        
        pxout.a = pxbg.a;
        
        
    }
}
