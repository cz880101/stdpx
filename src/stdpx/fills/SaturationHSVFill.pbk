///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2009 Vincent Petithory - http://blog.lunar-dev.net/
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE. 
///////////////////////////////////////////////////////////////////////////////

<languageVersion : 1.0;>

kernel SaturationHSVFill
<   
    namespace : "http://www.lunar-dev.net/2009/stdpx/fills";
    vendor : "Vincent Petithory";
    version : 1;
    description : "Generates a HSV color space based on a variable saturation.";
>
{
    //input image4 src;
    output pixel4 result;
    
    parameter float saturation
    <
        minValue: 0.0;
        maxValue: 1.0;
        defaultValue: 0.0;
    >;

    void evaluatePixel()
    {
        float2 uc = outCoord();
        pixel3 hsvOut = pixel3(
                            uc.x/256.0, 
                            saturation, 
                            1.0-uc.y/256.0 
                        );
        
        // Convert HSV color to RGB color
        pixel4 rgbOut = pixel4(0.0,0.0,0.0,1.0);
        
        if (hsvOut.y == 0.0)
        {
            rgbOut.xyz = hsvOut.zzz;
        }
        else
        {
            float vH = hsvOut.x*6.0;
            if (vH == 6.0)
                vH = 0.0;
            
            float vfH = floor(vH);
            float3 vi = float3(
                                hsvOut.z*(1.0 - hsvOut.y), 
                                hsvOut.z*(1.0 - hsvOut.y*(vH - vfH)), 
                                hsvOut.z*(1.0 - hsvOut.y*(1.0 - (vH - vfH)))
                                );
            
            if (vfH == 0.0)
                rgbOut.xyz = float3(hsvOut.z, vi.z, vi.x);
            else if (vfH == 1.0)
                rgbOut.xyz = float3(vi.y, hsvOut.z, vi.x);
            else if (vfH == 2.0)
                rgbOut.xyz = float3(vi.x, hsvOut.z, vi.z);
            else if (vfH == 3.0)
                rgbOut.xyz = float3(vi.x, vi.y, hsvOut.z);
            else if (vfH == 4.0)
                rgbOut.xyz = float3(vi.z, vi.x, hsvOut.z);
            else // ( vfH == 5.0 and there is no other cases
                rgbOut.xyz = float3(hsvOut.z, vi.x, vi.y);
        }
        result = rgbOut;
    }
}
