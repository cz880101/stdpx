///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2009 Vincent Petithory - http://blog.lunar-dev.net/
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE. 
///////////////////////////////////////////////////////////////////////////////

<languageVersion : 1.0;>

kernel LLCHFill 
<   
    namespace : "http://www.lunar-dev.net/2009/stdpx/fills";
    vendor : "Vincent Petithory";
    version : 1;
    description : "Generates a L*C*H° color space based on a variable L* value.";
>
{
    //input image4 src;
    output pixel4 result;
    
    parameter float lightness
    <
        minValue:       0.0;
        maxValue:       1.0;
        defaultValue:   0.0;
    >;
    
    #define LIM 0.0031308
    #define LIM2 0.008856
    #define DIV16 16.0/116.0
    #define DIV7 1.0/7.787
    #define ADD0 0.055
    #define MULT1 1.055
    #define MULT2 12.92
    #define POW 1.0/2.4
    
    #define REF float3 (95.047 , 100.0 , 108.883)
    #define MAT float3x3 (3.2406,-0.9689,0.0557 , -1.5372,1.8758,-0.2040 , -0.4986,0.0415,1.0570)
    
    #define PI acos(-1.0)
    
    void evaluatePixel()
    {
        float2 uc = outCoord();
        
        pixel3 lch = pixel3(
            lightness,
            1.0-uc.y/256.0,
            uc.x/256.0 
        );
        
        pixel3 lab = pixel3(
            lch.x, 
            (lch.y*cos(lch.z*2.0*PI)), 
            (lch.y*sin(lch.z*2.0*PI)) 
        );
        
        lab = lab*100.0;
        
        float y = lab.x/116.0 + DIV16;
        pixel3 xyz = pixel3(y+lab.y/500.0, y, y - lab.z/200.0);
        pixel3 xyz3 = xyz*xyz*xyz;
        
        if (xyz3.x > LIM2)
            xyz.x = xyz3.x;
        else
            xyz.x = (xyz.x-DIV16)*DIV7;
        if (xyz3.y > LIM2)
            xyz.y = xyz3.y;
        else
            xyz.y = (xyz.y-DIV16)*DIV7;
        if (xyz3.z > LIM2)
            xyz.z = xyz3.z;
        else
            xyz.z = (xyz.z-DIV16)*DIV7;
        
        xyz = xyz*REF/float3(100.0);
        
        pixel3 rgb = MAT*xyz;
        
        if (rgb.r>LIM)
            rgb.r = MULT1*pow(rgb.r,POW)-ADD0;
        else
            rgb.r = MULT2*rgb.r;
        
        if (rgb.g>LIM)
            rgb.g = MULT1*pow(rgb.g,POW)-ADD0;
        else
            rgb.g = MULT2*rgb.g;
            
        if (rgb.b>LIM)
            rgb.b = MULT1*pow(rgb.b,POW)-ADD0;
        else
            rgb.b = MULT2*rgb.b;
        
        result.rgb = rgb;
        result.a = 1.0;
        
        
    }
}
