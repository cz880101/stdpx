///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2009 Vincent Petithory - http://blog.lunar-dev.net/
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE. 
///////////////////////////////////////////////////////////////////////////////

<languageVersion : 1.0;>

kernel ZoomLinearFilter
<   namespace : "http://www.lunar-dev.net/2009/stdpx/filters";
    vendor : "Vincent Petithory";
    version : 1;
    description : "Zooms at an image and at a specified point, performing a basic linear interpolation.";
>
{
    input image4 src;
    output pixel4 dst;

    parameter float2 center
    <
        minValue: float2(0.0);
        maxValue: float2(2048.0);
        defaultValue: float2(0.0);
        description: "The target point to zoom at";
    >;
    
    parameter float zoom
    <
        minValue: 1.0;
        maxValue: 50.0;
        defaultValue: 1.0;
        description: "The strength of the zoom";
    >;

    void evaluatePixel()
    {
        // get coordinates
        float2 oc = outCoord()*1.0/zoom+center;
        
        // Make basic linear interpolation (actually a little blur)
        pixel4 in11 = sampleNearest(src,oc);
        
        pixel3 in01 = sampleNearest(src,oc+float2(-1,0)).rgb;
        pixel3 in21 = sampleNearest(src,oc+float2(1,0)).rgb;
        pixel3 in10 = sampleNearest(src,oc+float2(0,-1)).rgb;
        pixel3 in12 = sampleNearest(src,oc+float2(0,1)).rgb;
        
        pixel3 in00 = sampleNearest(src,oc+float2(-1,-1)).rgb;
        pixel3 in22 = sampleNearest(src,oc+float2(1,1)).rgb;
        pixel3 in02 = sampleNearest(src,oc+float2(-1,1)).rgb;
        pixel3 in20 = sampleNearest(src,oc+float2(1,-1)).rgb;
        
        dst.rgb = (in11.rgb+in01+in21+in10+in12+in00+in22+in02+in20)/9.0;
        dst.a = in11.a;
        
    }
}
