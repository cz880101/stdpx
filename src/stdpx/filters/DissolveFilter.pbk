///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2009 Vincent Petithory - http://blog.lunar-dev.net/
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE. 
///////////////////////////////////////////////////////////////////////////////

<languageVersion : 1.0;>

kernel DissolveFilter
<   
    namespace : "http://www.lunar-dev.net/2009/stdpx/filters";
    vendor : "Vincent Petithory";
    version : 1;
    description : "Dissolves an image based on its alpha value";
>
{
    input image4 src;
    output pixel4 pxout;
    
    
    parameter float seed
    <
        minValue: 1.0;
        maxValue: 255.0;
        defaultValue: 127.0;
        description: "A value changing the noise near transparent area";
    >;
    
    #define A 16807.0
    #define C 0.0
    #define M 2147483647.0
    
    
    
    void evaluatePixel()
    {
        float2 oc = outCoord();
        
        pixel1 r = seed*((oc.x+oc.y)+oc.x*oc.y);
        pixel1 t = mod(A*r + C, M);
        t = mod(A*t + C, M);
        t = mod(A*t + C, M);
        
        pixel1 n = t/M;
        
        pixel4 pxin = sampleNearest(src,oc);
        
        if (pxin.a>0.0)
        {
            pxin.rgb /= pxin.a;
        }
        
        pxout.rgb = pxin.rgb;
        
        if (n>pxin.a)
        {
            pxout.a = pixel1(0.0);
        }
        else
        {
            pxout.a = 1.0;
        }
        
    }
}
