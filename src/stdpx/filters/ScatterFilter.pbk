///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008 Vincent Petithory - http://blog.lunar-dev.net/
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE. 
///////////////////////////////////////////////////////////////////////////////

<languageVersion : 1.0;>

kernel ScatterFilter
<   namespace : "http://www.lunar-dev.net/2009/stdpx/filters";
    vendor : "Vincent Petithory";
    version : 1;
    description : "Creates a noisy aspect to the image by scattering its pixels.";
>
{
    input image4 src;
    output pixel4 dst;
    
    parameter float radius
    <
        minValue: 0.0;
        maxValue: 100.0;
        defaultValue: 0.0;
        description: "The strength of the scattering";
    >;

    #define A 16807.0
    #define C 0.0
    #define M 2147483647.0
    
    void evaluatePixel()
    {
        float2 oc = outCoord();
        float r = (oc.x+oc.y)+oc.x*oc.y;
        float t =mod(A*r + C, M);
        t = mod(A*t + C, M);
        t = mod(A*t + C, M);
        t = mod(A*t + C, M);
        
        float nx = t/M;
        
        t = mod(A*t + C, M);
        t = mod(A*t + C, M);
        float ny = t/M;
        float2 n = float2(nx,ny);
        
        dst = sampleNearest(src,oc+floor(n*radius)-float2(radius/2.0));
        if (dst.a==0.0)
        {
            dst = sampleNearest(src,oc);
        }
    }
}
