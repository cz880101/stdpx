///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2009 Vincent Petithory - http://blog.lunar-dev.net/
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE. 
///////////////////////////////////////////////////////////////////////////////

<languageVersion : 1.0;>

kernel HSLColorJob
<   namespace : "http://blog.lunar-dev.net::Jobs";
    vendor : "Vincent Petithory";
    version : 1;
    description : "Creates a 4-channel color in the HSL space";
>
{
    
    input image3 src;
    output pixel3 result;
    
    void evaluatePixel()
    {
        
        pixel3 valueIn = sampleNearest(src,outCoord());
        pixel3 hslOut = pixel3(valueIn.x/360.0,valueIn.y/100.0,valueIn.z/100.0);
        // Convert HSL color to RGB color
        pixel3 rgbOut = pixel3(0.0);
        
        if (hslOut.y == 0.0)
        {
            rgbOut.rgb = hslOut.zzz;
        }
        else
        {
            float vLS2;
            if (hslOut.z < 0.5)
                vLS2 = hslOut.z*(1.0 + hslOut.y);
            else
                vLS2 = hslOut.y + hslOut.z - hslOut.y*hslOut.z;
                
                
            float vLS1 = 2.0*hslOut.z - vLS2;
            
            float3 vH = float3(hslOut.x + 1.0/3.0, hslOut.x, hslOut.x - 1.0/3.0);
            
            if (vH.x < 0.0)
                vH.x += 1.0;
			else if (vH.x > 1.0)
                vH.x -= 1.0;
                
            if (vH.y < 0.0)
                vH.y += 1.0;
			else if (vH.y > 1.0)
                vH.y -= 1.0;
                
            if (vH.z < 0.0)
                vH.z += 1.0;
			else if (vH.z > 1.0)
                vH.z -= 1.0;
            
            float3 vHCross6 = 6.0*vH;
            
            if (vHCross6.x < 1.0)
                rgbOut.r = vLS1 + (vLS2 - vLS1)*vHCross6.x;
            else if (vHCross6.x < 3.0)
                rgbOut.r = vLS2;
            else if (vHCross6.x < 4.0)
                rgbOut.r = vLS1 + (vLS2 - vLS1)*(4.0 - vHCross6.x);
            else
                rgbOut.r = vLS1;
            
            if (vHCross6.y < 1.0)
                rgbOut.g = vLS1 + (vLS2 - vLS1)*vHCross6.y;
            else if (vHCross6.y < 3.0)
                rgbOut.g = vLS2;
            else if (vHCross6.y < 4.0)
                rgbOut.g = vLS1 + (vLS2 - vLS1)*(4.0 - vHCross6.y);
            else
                rgbOut.g = vLS1;
            
            if (vHCross6.z < 1.0)
                rgbOut.b = vLS1 + (vLS2 - vLS1)*vHCross6.z;
            else if (vHCross6.z < 3.0)
                rgbOut.b = vLS2;
            else if (vHCross6.z < 4.0)
                rgbOut.b = vLS1 + (vLS2 - vLS1)*(4.0 - vHCross6.z);
            else
                rgbOut.b = vLS1;
            
        }
        
        pixel1 rgb = floor(rgbOut.r * 255.0) * exp2(16.0) + floor(rgbOut.g * 255.0) * exp2(8.0) + floor(rgbOut.b * 255.0);
        result = pixel3(rgb);
    }
}
